// Load the main set.mm database
load "examples/examples.mm"

// Fetch hypotheses from the hypothesis or the 'antecedent' part of the goal
// This is useful to prove theorems written in the 'deduction' form.
tactics deduction ()
{ try
	!
	{ match goal
		$ ( &W1 -> ( &W2 /\ &W3 ) ) $
		{ apply ~jca { use deduction } { use deduction } }
		$ ( &W1 -> ( &W2 /\ &W3 /\ &W4 ) ) $
		{ apply ~3jca { use deduction } { use deduction } { use deduction } }
	}
	{ apply ~id }
	{ apply ~a1i ! }
	{ apply ~simpr }
	{ apply ~simpl }
	{ apply ~simplr }
	{ apply ~simpll }
	{ apply ~simpllr }
	{ apply ~simplll }
	{ apply ~simp-4r }
	{ apply ~simp-4l }
	{ apply ~simp-5r }
	{ apply ~simp-5l }

	{ match goal
		$ ( ph -> &C1 e. ( &C2 ^m &C3 ) ) $ { subgoal 
			{ use deduction } 
			$ ( ph -> &C1 : &C3 --> &C2 ) 
			$ { apply ~mpbird 
				{ use deduction }
				{ apply ~elmapd { use existence } { use existence } with ~cV $ _V $ ~cW $ _V $ }
				with ~wch $ &C1 : &C3 --> &C2 $ 
			}
		}
	}
}

// First put the antecedent in a normal form then apply the given tactics
tactics normalize ( @T )
{ match goal
	$ ( ( ph /\ ps /\ ch ) -> th ) $
	{ apply ~sylbir { apply ~df-3an } { use normalize @T } with ~wps $ ( ( ph /\ ps ) /\ ch ) $ }
	$ ( ( ph /\ ( ps /\ ch ) ) -> th ) $
	{ apply ~anasss { use normalize @T } }
	$ ( ( ( ph /\ ( ps /\ ch ) ) /\ th ) -> et ) $
	{ apply ~sylbir { apply ~anbi1i { apply ~anass } } { use normalize @T } with ~wps $ ( ( ( ph /\ ps ) /\ ch ) /\ th ) $ }
	$ ( ( ph /\ ( ps /\ ch /\ th ) ) -> et ) $
	{ apply ~3imp2 { apply ~exp41 { use normalize @T  } } }
	$ ( ph -> ps ) $
	@T
}

// Recursively reduce equality and biconditionals
// Given a formula containing `X`, this tactics should be able to prove equivalence or equality 
// for the same formula where `X` has been substituted by `Y`, as long as `X = Y` can be derived from the antecedent
// or hypotheses.  It also handles multiple such substitutions, as well as `B = ( Base ` G )` type hypotheses.
tactics equality ()
{ try
	{ use deduction }
	{ apply ~biid }
	{ apply ~eqid }
	{ apply ~biidd }
	{ apply ~eqidd }
	{ match goal
		$ ( ph -> ( ( ps /\ th ) <-> ( ch /\ ta ) ) ) $ { apply ~anbi12d { use equality } { use equality } }
		$ ( ph -> ( ( ps \/ th ) <-> ( ch \/ ta ) ) ) $ { apply ~orbi12d { use equality } { use equality } }
		$ ( ph -> ( ( ps /\ th /\ et ) <-> ( ch /\ ta /\ ze ) ) ) $ { apply ~3anbi123d { use equality } { use equality } { use equality } }
		$ ( ph -> ( ( ps \/ th \/ et ) <-> ( ch \/ ta \/ ze ) ) ) $ { apply ~3orbi123d { use equality } { use equality } { use equality } }
		$ ( ph -> ( A. x ps <-> A. x ch ) ) $ { apply ~albid { use equality } }
		$ ( ph -> ( A. x e. A ps <-> A. x e. A ch ) ) $ { apply ~ralbidv { use equality } }
		$ ( ph -> ( A. x e. A ps <-> A. x e. B ps ) ) $ { apply ~raleqdv { use equality } }
		$ ( ph -> ( A. x e. A ps <-> A. x e. B ch ) ) $ { apply ~raleqbidv { use equality } { use equality } }
		$ ( ph -> ( E. x ps <-> E. x ch ) ) $ { apply ~exbid { use equality } }
		$ ( ph -> ( E. x e. A ps <-> E. x e. A ch ) ) $ { apply ~rexbidv { use equality } }
		$ ( ph -> ( E. x e. A ps <-> E. x e. B ps ) ) $ { apply ~rexeqdv { use equality } }
		$ ( ph -> ( E. x e. A ps <-> E. x e. B ch ) ) $ { apply ~rexeqbidv { use equality } { use equality } }
		$ ( ph -> ( A = B <-> C = B ) ) $ { apply ~eqeq1d { use equality } }
		$ ( ph -> ( A = B <-> A = C ) ) $ { apply ~eqeq2d { use equality } }
		$ ( ph -> ( A = B <-> C = D ) ) $ { apply ~eqeq12d { use equality } { use equality } }
		$ ( ph -> ( A e. B <-> C e. B ) ) $ { apply ~eleq1d { use equality } }
		$ ( ph -> ( A e. B <-> A e. C ) ) $ { apply ~eleq2d { use equality } }
		$ ( ph -> ( A e. B <-> C e. D ) ) $ { apply ~eleq12d { use equality } { use equality } }
		$ ( ph -> ( A R B <-> C R B ) ) $ { apply ~breq1d { use equality } }
		$ ( ph -> ( A R B <-> A R C ) ) $ { apply ~breq2d { use equality } }
		$ ( ph -> ( A R B <-> C R D ) ) $ { apply ~breq12d { use equality } { use equality } }
		$ ( ph -> ( A R B <-> A S B ) ) $ { apply ~breqd { use equality } }
		$ ( ph -> ( A R B <-> C S D ) ) $ { apply ~breq123d { use equality } { use equality } { use equality } }

		$ ( ph -> ( A O B ) = ( A P B ) ) $ { apply ~oveqd { use equality } }
		$ ( ph -> ( A O B ) = ( C O B ) ) $ { apply ~oveq1d { use equality } }
		$ ( ph -> ( A O B ) = ( A O C ) ) $ { apply ~oveq2d { use equality } }
		$ ( ph -> ( F ` A ) = ( G ` A ) ) $ { apply ~fveq1d { use equality } }
		$ ( ph -> ( F ` A ) = ( F ` B ) ) $ { apply ~fveq2d { use equality } }
		$ ( ph -> ( F ` A ) = ( G ` B ) ) $ { apply ~fveq12d { use equality } { use equality } }
		$ ( ph -> { x | ps } = { x | ch } ) $ { apply ~abbidv { use equality } }
		$ ( ph -> { x e. A | ps } = { x e. A | ch } ) $ { apply ~rabbidv { use equality } }
		$ ( ph -> { <. x , y >. | ps } = { <. x , y >. | ch } ) $ { apply ~opabbidv { use equality } }

		$ ( ph -> ( F : A --> B <-> G : A --> B ) ) $ { apply ~feq1d { use equality } }
		$ ( ph -> ( F : A --> C <-> F : B --> C ) ) $ { apply ~feq2d { use equality } }
		$ ( ph -> ( F : X --> A <-> F : X --> B ) ) $ { apply ~feq3d { use equality } }
		$ ( ph -> ( F : A --> C <-> G : B --> C ) ) $ { apply ~feq12d { use equality } { use equality } }
		$ ( ph -> ( F : A --> B <-> F : C --> D ) ) $ { apply ~feq23d { use equality } { use equality } }
		$ ( ph -> ( F : A --> C <-> G : B --> D ) ) $ { apply ~feq123d { use equality } { use equality } { use equality } }

		$ ( ph -> ( x e. A |-> B ) = ( x e. C |-> B ) ) $ { apply ~mpteq1d { use equality } }
		$ ( ph -> ( x e. A |-> B ) = ( x e. A |-> C ) ) $ { apply ~mpteq2dv { use equality } }
		$ ( ph -> ( x e. A |-> B ) = ( x e. C |-> D ) ) $ { apply ~mpteq12dv { use equality } { use equality } }

		$ ( ph -> ( x e. A , y e. B |-> C ) = ( x e. A , y e. B |-> D ) ) $ { apply ~mpoeq3dv { use equality } }
		$ ( ph -> ( x e. A , y e. B |-> C ) = ( x e. D , y e. E |-> F ) ) $ { apply ~mpoeq123dv { use equality } { use equality } { use equality } }

		$ ( ph -> ( iota_ x e. A ps ) = ( iota_ x e. B ps ) ) $ { apply ~riotaeqdv { use equality } }
		$ ( ph -> ( iota_ x e. A ps ) = ( iota_ x e. A ch ) ) $ { apply ~riotabidv { use equality } }
		$ ( ph -> ( iota_ x e. A ps ) = ( iota_ x e. B ch ) ) $ { apply ~riotaeqbidv { use equality } { use equality } }

		$ ( ph -> if ( &W1 , &C1 , &C2 ) = if ( &W1 , &C3 , &C2 ) ) $ { apply ~ifeq1d { use equality }  }
		$ ( ph -> if ( &W1 , &C1 , &C2 ) = if ( &W1 , &C1 , &C3 ) ) $ { apply ~ifeq2d { use equality }  }
		$ ( ph -> if ( &W1 , &C1 , &C2 ) = if ( &W1 , &C3 , &C4 ) ) $ { apply ~ifeq12d { use equality }  }
		$ ( ph -> if ( &W1 , &C1 , &C2 ) = if ( &W2 , &C1 , &C2 ) ) $ { apply ~ifbid { use equality }  }
		$ ( ph -> if ( &W1 , &C1 , &C2 ) = if ( &W2 , &C3 , &C2 ) ) $ { apply ~ifbieq1d { use equality }  }
		$ ( ph -> if ( &W1 , &C1 , &C2 ) = if ( &W2 , &C1 , &C3 ) ) $ { apply ~ifbieq2d { use equality }  }
		$ ( ph -> if ( &W1 , &C1 , &C2 ) = if ( &W2 , &C3 , &C4 ) ) $ { apply ~ifbieq12d { use equality }  }

		$ ( ( ( ph /\ X = Y ) /\ ps ) -> &C1 = &C2 ) $ { apply ~eqtr4di { use equality } ! with ~cB s/ $ X $ / $ Y $ / $ &C1 $ }
		$ ( ( ph /\ X = Y ) -> &C1 = &C2 ) $ { apply ~eqtr4di { use equality } ! with ~cB s/ $ X $ / $ Y $ / $ &C1 $ }
		$ ( ( X = Y /\ ph ) -> &C1 = &C2 ) $ { apply ~eqtr4di { use equality } ! with ~cB s/ $ X $ / $ Y $ / $ &C1 $ }
		$ ( X = Y -> &C1 = &C2 ) $ { apply ~eqtr4di { use equality } ! with ~cB s/ $ X $ / $ Y $ / $ &C1 $ }
	}
}

// Prove "existence", a.k.a. "sethood", i.e. wff matching `( ph -> A e. _V )`
// Two sets are optionally provided in case intermediate sethood has to be proven.
tactics existence ( +V +W )
{ try
	!
	{ apply ~elex }
	{ apply ~elexd { use deduction } with ~cV +V }
	{ apply ~ovex }
	{ apply ~ovexd }
	{ apply ~fvex }
	{ apply ~fvexd }
	{ match goal 
		$ ( &W1 -> &C1 e. _V ) $
		{ findhyp
			$ ( &W1 -> &C1 e. &C2 ) $
			{ apply ~elexd ! with ~cV $ &C2 $ }
		}
		$ ( &W1 -> ( &S1 e. &C1 , &S2 e. &C2 |-> &C3 ) e. _V ) $ 
		{ apply ~syl2anc { use existence } { use existence } { apply ~mpoexga } with ~wps $ &C1 e. _V $ ~wch $ &C2 e. _V $ }
		// { subgoal { use existence } $ ( &W1 -> &C1 e. _V ) $
		//	{ subgoal { use existence } $ ( &W1 -> &C2 e. _V ) $
		//	//	{ use deduction_apply ~mpoexga { apply ~mpoexga } }  // Here, deduction_apply did not work due to &C4 and &C5 not being identified correctly
		//		{ subgoal
		//			{ apply ~mpoexga }
		//			$ ( ( &C1 e. _V /\ &C2 e. _V ) -> ( &S1 e. &C1 , &S2 e. &C2 |-> &C3 ) e. _V ) $
		//			{ apply ~syl2anc ! ! ! with ~wps $ &C1 e. _V $ ~wch $ &C2 e. _V $ }
		//		}
		//	}
		// }
		$ ( &W1 -> { <. &S1 , &S2 >. | ( ( &S1 e. &C1 /\ &S2 e. &C2 ) /\ &W2 ) } e. _V ) $
		{ apply ~opabex2
			{ use existence }
			{ use existence }
			{ use normalize { use deduction } }
			{ use normalize { use deduction } }
			with
			~cA $ &C1 $
			~cB $ &C2 $
			~cV $ _V $
			~cW $ _V $
		}
		$ ( &W1 -> { <. &S1 , &S2 >. | ( &S1 e. &C1 /\ &S2 e. &C2 /\ &W2 ) } e. _V ) $
		{ apply ~opabex2
			{ use existence }
			{ use existence }
			{ use normalize { use deduction } }
			{ use normalize { use deduction } }
			with
			~cA $ &C1 $
			~cB $ &C2 $
			~cV $ _V $
			~cW $ _V $
		}
		$ ( &W1 -> { <. &S1 , &S2 >. | &W2 } e. _V ) $
		{ apply ~opabex2
			{ use existence }
			{ use existence }
			{ use normalize { use deduction } }
			{ use normalize { use deduction } }
			with
			~cA +V
			~cB +W
			~cV $ _V $
			~cW $ _V $
		}
		$ ( &W1 -> ( iota_ &S1 e. &C1 &W2 ) e. _V ) $
		{ subgoal { apply ~riotaex } $ ( iota_ &S1 e. &C1 &W2 ) e. _V $ { apply ~a1i ! } }
		$ ( ph -> &C1 e. _V ) $
		{ findhyp
			$ &C1 = ( &C2 ` &C3 ) $
			{ apply ~a1i 
				{ apply ~eqeltri
					!
					{ apply ~fvex } 
					with
					~cB $ ( &C2 ` &C3 ) $
				}
			}
		}
	}
}

// 
tactics closure ( @T )
{ match goal
	$ ( &W1 -> ( iota_ &S1 e. &C1 &W2 ) e. &C1 ) $
	{ subgoal
		{ apply ~riotacl }
		$ ( E! &S1 e. &C1 &W2 -> ( iota_ &S1 e. &C1 &W2 ) e. &C1 ) $
		@T
	}
}

// Develops the definition for common construct.
// The optional tactics provided are used to prove subgoals.
tactics definition ( @T1 @T2 @T3 )
{ try { use deduction } { match goal
	$ ( &W1 -> ( &C1 ` &C2 ) = &C3 ) $
	{ try
		{ find
			!
			$ &C1 = ( &S1 e. &C4 |-> &C5 ) $
			{ apply ~fvmptd
				{ apply ~a1i ! }
				{ use equality }
				@T1
				@T2
				with
				~vx $ &S1 $
				~cB $ &C5 $
				~cD $ &C4 $
				~cV $ _V $
			}
		}
		{ find
			!
			$ ( &W1 -> &C1 = ( &S1 e. &C4 |-> &C3 ) ) $
			{ apply ~fvmptd
				!
				{ use equality }
				@T1
				@T2
				with
				~vx $ &S1 $
				~cB $ &C5 $
				~cD $ &C4 $
				~cV $ _V $
			}
		}
	}
	$ ( &W1 -> ( &C1 &C2 &C3 ) = &C4 ) $
	{ try
		{ find
			!
			$ &C2 = ( &S1 e. &C5 , &S2 e. &C6 |-> &C7 ) $
			{ apply ~ovmpod
				{ apply ~a1i ! }
				{ use normalize { use equality } }
				@T1
				@T2
				@T3
				with
				~vx $ &S1 $
				~vy $ &S2 $
				~cC $ &C5 $
				~cD $ &C6 $
				~cR $ &C7 $
				~cX $ _V $
			}
		}
		{ find
			!
			$ ( &W1 -> &C2 = ( &S1 e. &C5 , &S2 e. &C6 |-> &C7 ) ) $
			{ apply ~ovmpod
				!
				{ use normalize { use equality } }
				@T1
				@T2
				@T3
				with
				~vx $ &S1 $
				~vy $ &S2 $
				~cC $ &C5 $
				~cD $ &C6 $
				~cR $ &C7 $
				~cX $ _V $
			}
		}
	}
	$ ( &W1 -> ( &C1 &C2 &C3 <-> &W2 ) ) $
	?
} }

// Apply the `≈THM` theorem provided in parameter while in "deduction" mode.
// Many theorems are stated in "inference" form (-i) or "closed" form (-g)
tactics deduction_apply ( ≈THM @T )
{ match statement ≈THM // Warning, matching here is matching at meta level (theorem statement level), more substitutions shall be extracted!
	$ ( ( &W1 /\ &W2 ) -> &W3 ) $
	{ match goal $ ( &W4 -> &W3 ) $ { apply ~syl2anc { use deduction } { use dedution } @T with ~wps $ &W1 $ ~wch $ &W2 $ } }
	$ ( &W1 -> ( &W2 /\ &W3 ) ) $
	{ match goal 
		$ ( &W4 -> &W2 ) $ { apply ~syl { use deduction } { apply ~simpld @T with ~wch $ &W3 $ } with ~wps $ &W1 $ }
		$ ( &W4 -> &W3 ) $ { apply ~syl { use deduction } { apply ~simprd @T with ~wch $ &W2 $ } with ~wps $ &W1 $ }
	}
	$ ( &W1 -> &W2 ) $
	{ match goal 
		$ ( &W4 -> &W2 ) $
		{ apply ~syl { use deduction } @T with ~wps $ &W1 $ }
	}
}

// 
tactics construction ( +S ≈THM @T @U )
{ match goal $ ( &W1 -> &W2 ) $ 
	{ match statement ≈THM 
		$ ( &W3 -> E. &S1 e. &C1 &W4 ) $
		{	apply ~r19.29a
			@U
			{ use deduction_apply ≈THM @T }
			with ~vx +S ~cA $ &C1 $ ~wps s/ $ &S1 $ / +S / $ &W4 $
		}
	}
}

// Like the "constuction" tactics, but for hypotheses.
tactics construction_hyp ( @U )
{ match goal $ ( &W1 -> &W2 ) $ 
	{ findhyp $ ( &W3 -> E. &S1 e. &C1 &W4 ) $
		{ apply ~r19.29a @U ! with ~vx $ &S1 $ ~cA $ &C1 $ ~wps $ &W4 $ }
	}
}

// Prove that an expression is a real number, deduction version
tactics reals_closure ()
{ try
	{ apply ~a1i ! }
	{ use deduction }
	{ match goal
		$ ( &W1 -> &C1 e. RR ) $ { match $ &C1 $
			$ -u &C2 $ { apply ~renegcld { use reals_closure } }
			$ ( &C2 + &C3 ) $ { apply ~readdcld { use reals_closure } { use reals_closure } }
			$ ( &C2 - &C3 ) $ { apply ~resubcld { use reals_closure } { use reals_closure } }
			$ ( &C2 x. &C3 ) $ { apply ~remulcld { use reals_closure } { use reals_closure } }
			$ ( &C2 / 2 ) $ { apply ~rehalfcld { use reals_closure } }
			$ ( &C2 / &C3 ) $ { apply ~redivcld { use reals_closure } { use reals_closure } { use deduction } }
		}
		$ &C1 e. RR $ !
	}
}

// --- Theorems ---
// Below are proofs of theorems from `set.mm` to demonstrate how proofs can be written.

// Prove an example theorem
proof ~rummex1
{ use reals_closure }

// 
proof ~inftmrel
{ apply ~eqsstrdi
	{ use definition { use existence } { use existence } }
	{ apply ~opabssxp }
	with ~cB $ { <. x , y >. | ( ( x e. B /\ y e. B ) /\ ( ( 0g ` W ) ( lt ` W ) x /\ A. n e. NN ( n ( .g ` W ) x ) ( lt ` W ) y ) ) } $
}

proof ~ellimc
{ apply ~bitrd
	{ subgoal 
		{ use deduction_apply ~limcfval { apply ~limcfval { use deduction } { use deduction } } }
		$ ( ph -> ( F limCC B ) = { y | ( z e. ( A u. { B } ) |-> if ( z = B , y , ( F ` z ) ) ) e. ( ( J CnP K ) ` B ) } ) $
		{ use equality }
	}
	{ apply ~syl
		{ use deduction_apply ~limcvallem { apply ~limcvallem ! ! ! with ~vz $ z $ } }
		{ apply ~elab3g { use equality } }
		with ~wps $ ( G e. ( ( J CnP K ) ` B ) -> C e. CC ) $
	}
	with ~wch $ C e. { y | ( z e. ( A u. { B } ) |-> if ( z = B , y , ( F ` z ) ) ) e. ( ( J CnP K ) ` B ) } $
}

proof ~ajfval
{ apply ~eqtrid ! { use definition { use deduction } { use deduction } { use existence $ ( Y ^m X ) $ $ ( X ^m Y ) $ } } with ~cB $ ( U adj W ) $ }

proof ~ismidb
{ subgoal
	{ use definition { use existence } { use existence } }
	$ ( ph -> ( midG ` G ) = ( a e. P , b e. P |-> ( iota_ m e. P b = ( ( S ` m ) ` a ) ) ) ) $
	{ subgoal
		{ use definition { use existence } { use existence } { use existence } }
		$ ( ph -> ( A ( midG ` G ) B ) = ( iota_ m e. P B = ( ( S ` m ) ` A ) ) ) $
		{ apply ~bitr4d
			//	{ use deduction_apply ~riota2 { use equality } }  // Here, deduction_apply did not work due to &W4 and &W5 not being identified correctly
			{ apply ~syl2anc ! { apply ~mideu ! ! ! { apply ~eqid } ! ! ! ! ! with ~cL $ ( LineG ` G ) $ ~cG $ G $ ~cI $ I $ ~c.mi $ .- $ } { apply ~riota2 { use equality } } with ~wps $ M e. P $ ~wch $ E! m e. P B = ( ( S ` m ) ` A ) $ }
			{ apply ~eqeq1d { use definition } }
			with ~wch $ ( iota_ m e. P B = ( ( S ` m ) ` A ) ) = M $
		}
	}
}

proof ~df-mod
{ use justify ~df-mod with ~vx $ V1 $ ~vy $ V2 $ }

tactics cbv
{
	?
}

tactics justify ( ≈S with *U )
{ match goal 
   $ &C1 = &C2 $
   { apply ~eqtri { apply ≈S } cbv with ~cB s/ *U / $ &C2 $ }
}


// proof ~isleag2lem
// {	subgoal
//	{ apply ~mpbid
//		!
//		{ apply ~isleag ! ! ! ! ! ! ! ! }
//		with ~wps $ <" A B C "> ( leA ` G ) <" D E F "> $
//	}
//	$ ( ph -> E. x e. P ( x ( inA ` G ) <" D E F "> /\ <" A B C "> ( cgrA ` G ) <" D E x "> ) ) $
//	{ use construction_hyp
//		{ use construction $ a $ ~hlcgrex
//			? ?
//		}
//	}
// }
